What is the difference between a class method and an instance method?

STATIC METHODS	VS Instance Method

SM : When a method declaration includes a static modifier, that method is said to be a static method.
IM : When no static modifier is present, the method is said to be an instance method.


SM : Static method is the only one. All the instances will be accessing the same method
IM : Every instance of the class will have its own instance methods


static members as belonging to classes
Instance members as belonging to objects (instances of classes).


SM : When a static member M is referenced in a member-access of the form E.M, E must denote a type containing M.It is a compile-time error for E to denote an instance.
IM : When an instance member M is referenced in a member-accessof the form E.M, E must denote an instance of a type containing M. It is a compile-time error for E to denote a type.


SM : Static methods just operate on input parameters and cannot access internal instance fields.
IM : Instance method can acces the instance fields


SM : The static method is callable on a class even when no instance of the class has been created.
IM : Cannot access instance method with out the instance

SM : Static methods cannot access non-static fields and events in their containing type, and they cannot access an instance variable of any object unless it is explicitly passed in a method parameter.
IM : Instance methods can access static fields


SM : Static methods can be overloaded but not overridden
IM : Instance methods can be overriden when the class containing the instance method is inherited and having virtual keyword in the base class method and overriden key word in the derived class method


SM : A call to a static method generates a call instruction in Microsoft intermediate language (MSIL)
IM : call to an instance method generates a callvirt instruction, which also checks for a null object references



Example :

class Test
{	static void Main() {
int x;	Test t = new Test();
static int y;	t.x = 1; // Ok
void F() {	t.y = 1; // Error, cannot access static member through instance
x = 1; // Ok, same as this.x = 1	Test.x = 1; // Error, cannot access instance member through type
y = 1; // Ok, same as Test.y = 1	Test.y = 1; // Ok
}	}
static void G() {	}
x = 1; // Error, cannot access this.x
y = 1; // Ok, same as Test.y = 1
}
