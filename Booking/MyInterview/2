stream = StreamThingy("ycarzkiucatuifeadogsfxvcatdwzq")
stream.next_char() # Returns next char in stream or \0 at the end of the stream
words = ["car", "dog", "cat", "hat"]
result = count_words(stream, words) // <-
result = {
    "car": 1,
    "cat": 2,
    "dog": 1,
}

class word_count:
    def __init(self, words):
        self.words = words
        self.stream = []

    def addToStream(self, ch):
        if not ch:
            self.stream.append(ch)

    #KMP O(n+m)
    def count_words(self):
        table = {}
        for word in self.words: #O(n)
            table[word] = self.search(word, self.stream) #O(n+m)

        return table

    def serach(self, pattern, text):
        if not pattern or not text:
            return None

        match_count = 0
        lps = self.computeTempArray(pattern)

        n = len(pattern)
        m = len(text)

        i = 0
        j = 0

        while i < n and j < m:
            if pattern[i] == text[j]:
                i += 1
                j += 1
            else:
                if j != 0:
                    j = lps[j-1]
                else:
                    i += 1

            if j == n:
                match_count += 1
                j = 0
                i -= 1
        return match_count

    def computeTempArray(self, pattern):
        lps = [0] * len(pattern)

        i = 0
        j = 1

        while j < len(pattern):

            if pattern[i] == pattern[j]:
                i += 1
                j += 1
            else:
                if j != 0:
                    j = [j-1]
                else:
                    lps[j] = i
                    i += 1
        return lps

words = ["car", "dog", "cat", "hat"]
cnt  = word_count(words)
for ch in "ycarzkiucatuifeadogsfxvcatdwzq":
    cnt.addToStream(ch)

result = cnt.count_words()
